{"remainingRequest":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/parkerbrown/lilbig/broke/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/parkerbrown/lilbig/broke/test/src/views/Presentation.vue?vue&type=template&id=295fd354&","dependencies":[{"path":"/Users/parkerbrown/lilbig/broke/test/src/views/Presentation.vue","mtime":1614458893868},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/cache-loader/dist/cjs.js","mtime":1581893857330},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1609898063567},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/cache-loader/dist/cjs.js","mtime":1581893857330},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/index.js","mtime":1609898063567}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "wrapper bg-primary" }, [
    _c("div", { staticClass: "section section-hero section-shaped" }, [
      _c("div", { staticClass: "page-header" }, [
        _c("div", { staticClass: "page-header-image" }),
        _c(
          "div",
          {
            staticClass:
              "container shape-container d-flex align-items-center py-lg "
          },
          [
            _c("div", { staticClass: "col px-0" }, [
              _c("div", { staticClass: "row" }, [
                _c(
                  "div",
                  { staticClass: "col-lg-4 ml-5" },
                  [
                    _c("img", {
                      staticClass: "img-fluid",
                      staticStyle: { width: "200px" },
                      attrs: { src: "img/brand/green.png" }
                    }),
                    _c(
                      "badge",
                      { staticClass: "ml-2", attrs: { type: "danger" } },
                      [_vm._v("PRO")]
                    ),
                    _vm._m(0),
                    _c(
                      "div",
                      { staticClass: "btn-wrapper mt-5" },
                      [
                        _c(
                          "base-button",
                          {
                            staticClass: "mb-3 mb-sm-0",
                            attrs: {
                              tag: "a",
                              href:
                                "https://www.creative-tim.com/product/vue-argon-design-system-pro",
                              type: "success",
                              icon: "fa fa-shopping-cart"
                            }
                          },
                          [_vm._v(" Purchase ")]
                        )
                      ],
                      1
                    ),
                    _vm._m(1)
                  ],
                  1
                )
              ])
            ])
          ]
        )
      ])
    ]),
    _vm._m(2),
    _vm._m(3),
    _c("section", { staticClass: "section-cards mb-5" }, [
      _c("div", { staticClass: "content-center" }, [
        _c("div", { staticClass: "container-fluid" }, [
          _c("div", { staticClass: "row" }, [
            _vm._m(4),
            _c(
              "div",
              { staticClass: "col-md-12 col-md-6" },
              [
                _c(
                  "vue-glide",
                  {
                    staticClass: "presentation-cards",
                    attrs: {
                      startAt: 0,
                      perView: 4,
                      perTouch: 1,
                      focutAt: 2,
                      type: "carousel"
                    }
                  },
                  [
                    _c("vue-glide-slide", [
                      _c("img", {
                        attrs: {
                          src: "img/presentation-page/card-blog.png",
                          height: "400",
                          width: "350"
                        }
                      })
                    ]),
                    _c("vue-glide-slide", [
                      _c("img", {
                        attrs: {
                          src: "img/presentation-page/card-pricing-1.png",
                          height: "400",
                          width: "350"
                        }
                      })
                    ]),
                    _c("vue-glide-slide", [
                      _c("img", {
                        attrs: {
                          src: "img/presentation-page/card-background.png",
                          height: "400",
                          width: "350"
                        }
                      })
                    ]),
                    _c("vue-glide-slide", [
                      _c("img", {
                        attrs: {
                          src: "img/presentation-page/card-pricing-2.png",
                          height: "400",
                          width: "350"
                        }
                      })
                    ]),
                    _c("vue-glide-slide", [
                      _c("img", {
                        attrs: {
                          src: "img/presentation-page/card-profile-2.png",
                          height: "400",
                          width: "350"
                        }
                      })
                    ]),
                    _c("template", { slot: "control" }, [
                      _c(
                        "button",
                        {
                          staticClass: "glide__arrow glide__arrow--left",
                          attrs: { "data-glide-dir": "<" }
                        },
                        [
                          _c("i", {
                            staticClass: "ni ni-bold-left text-default"
                          })
                        ]
                      ),
                      _c(
                        "button",
                        {
                          staticClass: "glide__arrow glide__arrow--right",
                          attrs: { "data-glide-dir": ">" }
                        },
                        [
                          _c("i", {
                            staticClass: "ni ni-bold-right text-default"
                          })
                        ]
                      )
                    ])
                  ],
                  2
                )
              ],
              1
            )
          ])
        ])
      ])
    ]),
    _vm._m(5),
    _vm._m(6),
    _c("section", { staticClass: "section-examples" }, [
      _c("div", { staticClass: "container" }, [
        _vm._m(7),
        _c("div", { staticClass: "row mt-5" }, [
          _c("div", { staticClass: "col-md-4" }, [
            _c("h5", { staticClass: "title" }, [_vm._v("About Us")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/about", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/about-us.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Landing Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/landing-page", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/landing-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Login Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/login", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/login-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Register Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/register", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/register-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Error 500")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/500-error", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/500-error.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Error 404")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/error", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/404-error.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Invoice Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/invoice", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/invoice-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            )
          ]),
          _c("div", { staticClass: "col-md-4" }, [
            _c("h5", { staticClass: "title" }, [_vm._v("Blog Post")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/blog-post", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/blog-post.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Product Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/product-page", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/product-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Profile Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/profile-page", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/profile-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Account Settings")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/account", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/account-settings.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Reset Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/reset", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/reset-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Checkout Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/checkout", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/checkout-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Chat Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/chat-page", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/chat-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            )
          ]),
          _c("div", { staticClass: "col-md-4" }, [
            _c("h5", { staticClass: "title" }, [_vm._v("Pricing Page")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/pricing", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/pricing-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Ecommerce")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/ecommerce", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/ecommerce-page.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Blog Posts")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/blog-posts", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/blog-posts.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            ),
            _c("h5", { staticClass: "title" }, [_vm._v("Contact Us")]),
            _c(
              "div",
              { staticClass: "card" },
              [
                _c(
                  "router-link",
                  { attrs: { to: "/contact-us", target: "_blank" } },
                  [
                    _c("img", {
                      attrs: {
                        src: "img/presentation-page/pages/contact-us.png",
                        alt: ""
                      }
                    })
                  ]
                )
              ],
              1
            )
          ])
        ])
      ])
    ]),
    _vm._m(8),
    _c(
      "section",
      { staticClass: "section-free-demo bg-secondary skew-separator" },
      [
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-lg-7 col-md-12" }, [
              _c("div", { staticClass: "section-description" }, [
                _c("h3", { staticClass: "display-3" }, [_vm._v("Free Demo")]),
                _c("p", { staticClass: "lead mb-4" }, [
                  _vm._v(
                    " Do you want to test and see the benefits of this Design System before purchasing it? You can give the demo version a try. It features enough basic components for you to get a feel of the design and also test the quality of the code. Get it free on GitHub! "
                  )
                ]),
                _c("div", { staticClass: "github-buttons" }, [
                  _c(
                    "a",
                    {
                      staticClass: "btn btn-primary btn-round",
                      attrs: {
                        href:
                          "https://github.com/creativetimofficial/vue-argon-design-system",
                        target: "_blank",
                        rel: "nofollow"
                      }
                    },
                    [_vm._v("View Demo on Github")]
                  ),
                  _c(
                    "div",
                    { staticClass: "mt-2" },
                    [
                      [
                        _c(
                          "github-button",
                          {
                            attrs: {
                              href:
                                "https://github.com/creativetimofficial/vue-argon-design-system",
                              "data-icon": "octicon-star",
                              "data-size": "large",
                              "data-show-count": "true",
                              "aria-label":
                                "Star creativetimofficial/ct-vue-argon-design-system-pro on GitHub"
                            }
                          },
                          [_vm._v("Star")]
                        )
                      ]
                    ],
                    2
                  )
                ])
              ])
            ]),
            _vm._m(9)
          ]),
          _c("div", { staticClass: "row" }, [
            _c(
              "div",
              { staticClass: "col-lg-4 col-md-6 pt-5" },
              [
                _c(
                  "card",
                  { staticClass: "card-pricing card-background" },
                  [
                    _c("template", { slot: "body" }, [
                      _c(
                        "h2",
                        {
                          staticClass: "card-title text-primary text-left ml-2"
                        },
                        [_vm._v(" Free Demo ")]
                      ),
                      _c("ul", [
                        _c("li", { staticClass: "text-left" }, [
                          _c("strong", [_vm._v("70")]),
                          _vm._v(" Components")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c("strong", [_vm._v("3")]),
                          _vm._v(" Example Pages")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c(
                            "div",
                            { staticClass: "badge badge-circle badge-danger" },
                            [_c("i", { staticClass: "fa fa-times text-white" })]
                          ),
                          _vm._v(" Uncoventional cards ")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c(
                            "div",
                            { staticClass: "badge badge-circle badge-danger" },
                            [_c("i", { staticClass: "fa fa-times text-white" })]
                          ),
                          _vm._v(" Sections ")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c(
                            "div",
                            { staticClass: "badge badge-circle badge-danger" },
                            [_c("i", { staticClass: "fa fa-times text-white" })]
                          ),
                          _vm._v(" Photoshop for Prototype ")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c(
                            "div",
                            { staticClass: "badge badge-circle badge-danger" },
                            [_c("i", { staticClass: "fa fa-times text-white" })]
                          ),
                          _vm._v(" Premium Support ")
                        ])
                      ])
                    ])
                  ],
                  2
                )
              ],
              1
            ),
            _c(
              "div",
              { staticClass: "col-lg-4 col-md-6 pt-5" },
              [
                _c(
                  "card",
                  { staticClass: "card-pricing card-background" },
                  [
                    _c("template", { slot: "body" }, [
                      _c(
                        "h2",
                        {
                          staticClass: "card-title text-primary text-left ml-2"
                        },
                        [_vm._v(" PRO Version ")]
                      ),
                      _c("ul", [
                        _c("li", { staticClass: "text-left" }, [
                          _c("strong", [_vm._v("1100+")]),
                          _vm._v(" Components")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c("strong", [_vm._v("17")]),
                          _vm._v(" Example Pages")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c(
                            "div",
                            { staticClass: "badge badge-circle badge-success" },
                            [
                              _c("i", {
                                staticClass: "ni ni-check-bold text-white"
                              })
                            ]
                          ),
                          _vm._v(" Uncoventional cards ")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c(
                            "div",
                            { staticClass: "badge badge-circle badge-success" },
                            [
                              _c("i", {
                                staticClass: "ni ni-check-bold text-white"
                              })
                            ]
                          ),
                          _vm._v(" Sections ")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c(
                            "div",
                            { staticClass: "badge badge-circle badge-success" },
                            [
                              _c("i", {
                                staticClass: "ni ni-check-bold text-white"
                              })
                            ]
                          ),
                          _vm._v(" Photoshop for Prototype ")
                        ]),
                        _c("li", { staticClass: "text-left" }, [
                          _c(
                            "div",
                            { staticClass: "badge badge-circle badge-success" },
                            [
                              _c("i", {
                                staticClass: "ni ni-check-bold text-white"
                              })
                            ]
                          ),
                          _vm._v(" Premium Support ")
                        ])
                      ])
                    ])
                  ],
                  2
                )
              ],
              1
            )
          ])
        ])
      ]
    ),
    _c("section", { staticClass: "section-icons mb-5" }, [
      _c("div", { staticClass: "container-fluid" }, [
        _c("div", { staticClass: "row" }, [
          _vm._m(10),
          _c(
            "div",
            { staticClass: "col-lg-6 col-sm-8 text-center" },
            [
              _c("h2", { staticClass: "display-2" }, [_vm._v("Custom Icons")]),
              _vm._m(11),
              _c("br"),
              _c(
                "base-button",
                {
                  staticClass: "btn-round",
                  attrs: {
                    tag: "a",
                    href:
                      "https://www.creative-tim.com/learning-lab/vue/icons/argon-design-system",
                    type: "primary",
                    target: "_blank"
                  }
                },
                [_vm._v("View Demo Icons")]
              ),
              _c(
                "base-button",
                {
                  staticClass: "btn-round",
                  attrs: {
                    tag: "a",
                    outline: "",
                    href: "https://nucleoapp.com/?ref=1712",
                    type: "primary",
                    target: "_blank"
                  }
                },
                [_vm._v("View All Icons")]
              )
            ],
            1
          ),
          _vm._m(12)
        ])
      ])
    ]),
    _vm._m(13),
    _c("section", { staticClass: "section-testimonials mt-5" }, [
      _c("div", { staticClass: "container" }, [
        _vm._m(14),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-6 col-8 mx-auto" },
            [
              _c(
                "b-carousel",
                {
                  ref: "carousel",
                  staticClass: "slide pointer-event",
                  attrs: { id: "carousel", height: "100vh", indicators: "" }
                },
                [
                  _c(
                    "b-carousel-slide",
                    {
                      staticClass: "carousel-inner",
                      attrs: { height: "100vh" }
                    },
                    [
                      _c(
                        "div",
                        { staticClass: "card card-testimonial card-plain" },
                        [
                          _c("div", { staticClass: "card-avatar" }, [
                            _c("a", { attrs: { href: "#pablo" } }, [
                              _c("img", {
                                staticClass: "img img-raised rounded",
                                attrs: {
                                  src:
                                    "https://s3.amazonaws.com/creativetim_bucket/photos/154001/thumb.JPG?1501184024"
                                }
                              })
                            ])
                          ]),
                          _c("div", { staticClass: "card-body text-center" }, [
                            _c(
                              "p",
                              { staticClass: "card-description text-dark" },
                              [
                                _vm._v(
                                  ' "Awesome Design and very well organized code structure! Also, it contains numerous elements using which achieving the perfect or required template can be done with ease. Great job!" '
                                )
                              ]
                            ),
                            _c("h4", { staticClass: "card-title" }, [
                              _vm._v("Stefan")
                            ]),
                            _c("h6", { staticClass: "category text-muted" }, [
                              _vm._v("Web Designer")
                            ]),
                            _c("div", { staticClass: "card-footer" }, [
                              _c("i", {
                                staticClass: "fa fa-star text-warning"
                              }),
                              _c("i", {
                                staticClass: "fa fa-star text-warning"
                              }),
                              _c("i", {
                                staticClass: "fa fa-star text-warning"
                              }),
                              _c("i", {
                                staticClass: "fa fa-star text-warning"
                              }),
                              _c("i", {
                                staticClass: "fa fa-star text-warning"
                              })
                            ])
                          ])
                        ]
                      )
                    ]
                  ),
                  _c("b-carousel-slide", { staticClass: "carousel-inner" }, [
                    _c(
                      "div",
                      { staticClass: "card card-testimonial card-plain" },
                      [
                        _c("div", { staticClass: "card-avatar" }, [
                          _c("a", { attrs: { href: "#pablo" } }, [
                            _c("img", {
                              staticClass: "img img-raised rounded",
                              attrs: {
                                src:
                                  "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg"
                              }
                            })
                          ])
                        ]),
                        _c("div", { staticClass: "card-body text-center" }, [
                          _c(
                            "p",
                            { staticClass: "card-description text-dark" },
                            [
                              _vm._v(
                                ' "It looks great and its somewhat futuristics cant wait to use it on a project here in nigeria i\'m sure it would put me ahead.. I cant wait to hv enough money to buy ur product." '
                              )
                            ]
                          ),
                          _c("h4", { staticClass: "card-title" }, [
                            _vm._v("Mr. Bones")
                          ]),
                          _c("h6", { staticClass: "category text-muted" }, [
                            _vm._v("Web Designer")
                          ]),
                          _c("div", { staticClass: "card-footer" }, [
                            _c("i", { staticClass: "fa fa-star text-warning" }),
                            _c("i", { staticClass: "fa fa-star text-warning" }),
                            _c("i", { staticClass: "fa fa-star text-warning" }),
                            _c("i", { staticClass: "fa fa-star text-warning" }),
                            _c("i", { staticClass: "fa fa-star text-warning" })
                          ])
                        ])
                      ]
                    )
                  ]),
                  _c("b-carousel-slide", { staticClass: "carousel-inner" }, [
                    _c(
                      "div",
                      { staticClass: "card card-testimonial card-plain" },
                      [
                        _c("div", { staticClass: "card-avatar" }, [
                          _c("a", { attrs: { href: "#pablo" } }, [
                            _c("img", {
                              staticClass: "img img-raised rounded",
                              attrs: {
                                src:
                                  "https://s3.amazonaws.com/creativetim_bucket/photos/123124/thumb.?1480480048"
                              }
                            })
                          ])
                        ]),
                        _c("div", { staticClass: "card-body text-center" }, [
                          _c(
                            "p",
                            { staticClass: "card-description text-dark" },
                            [
                              _vm._v(
                                " \"Everything is perfect. Codes are really organized. It's easy to edit for my own purposes. It's great that it is built on top of Bootstrap 4.\""
                              ),
                              _c("br"),
                              _c("br")
                            ]
                          ),
                          _c("h4", { staticClass: "card-title" }, [
                            _vm._v("DOĞA")
                          ]),
                          _c("h6", { staticClass: "category text-muted" }, [
                            _vm._v("Web Developer")
                          ]),
                          _c("div", { staticClass: "card-footer" }, [
                            _c("i", { staticClass: "fa fa-star text-warning" }),
                            _c("i", { staticClass: "fa fa-star text-warning" }),
                            _c("i", { staticClass: "fa fa-star text-warning" }),
                            _c("i", { staticClass: "fa fa-star text-warning" }),
                            _c("i", { staticClass: "fa fa-star text-warning" })
                          ])
                        ])
                      ]
                    )
                  ])
                ],
                1
              )
            ],
            1
          ),
          _c(
            "a",
            {
              staticClass: "carousel-control-prev text-primary",
              attrs: { role: "button", "data-slide": "prev" },
              on: { click: _vm.prev }
            },
            [
              _c("i", { staticClass: "ni ni-bold-left" }),
              _c("span", { staticClass: "sr-only" }, [_vm._v("Previous")])
            ]
          ),
          _c(
            "a",
            {
              staticClass: "carousel-control-next text-primary",
              attrs: { role: "button", "data-slide": "next" },
              on: { click: _vm.next }
            },
            [
              _c("i", { staticClass: "ni ni-bold-right" }),
              _c("span", { staticClass: "sr-only" }, [_vm._v("Next")])
            ]
          )
        ])
      ])
    ]),
    _c(
      "div",
      { staticClass: "section section-pricing", attrs: { id: "sectionBuy" } },
      [
        _c("div", { staticClass: "container" }, [
          _vm._m(15),
          _c("div", { staticClass: "row mt-5", attrs: { id: "pricing" } }, [
            _vm._m(16),
            _c("div", { staticClass: "col-lg-8 col-md-12 mx-auto" }, [
              _vm._m(17),
              _c("div", { staticClass: "row" }, [
                _c(
                  "div",
                  { staticClass: "col-md-6 pt-lg-5" },
                  [
                    _c(
                      "card",
                      {
                        staticClass: "card-pricing card-background",
                        staticStyle: {
                          "background-image":
                            "url('img/ill/pattern_pricing6.svg"
                        }
                      },
                      [
                        _c(
                          "template",
                          { slot: "body" },
                          [
                            _c(
                              "h6",
                              {
                                staticClass:
                                  "card-category text-danger text-uppercase"
                              },
                              [_vm._v(" Freelancer License ")]
                            ),
                            _c(
                              "h1",
                              { staticClass: "card-title text-default" },
                              [_c("small", [_vm._v("$")]), _vm._v("109")]
                            ),
                            _c("ul", [
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [
                                        _c("i", {
                                          staticClass: "ni ni-check-bold"
                                        })
                                      ]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 ml-3 text-sm" },
                                          [_vm._v("Documentation")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [
                                        _c("i", {
                                          staticClass: "ni ni-check-bold"
                                        })
                                      ]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 ml-3 text-sm" },
                                          [_vm._v("Full Code")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [
                                        _c("i", {
                                          staticClass: "ni ni-fat-delete"
                                        })
                                      ]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 ml-3 text-sm" },
                                          [_vm._v("Design Files")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [_vm._v(" Domains: ")]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 text-sm ml-3" },
                                          [_vm._v("1/product")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [_vm._v(" Team size: ")]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 text-sm ml-3" },
                                          [_vm._v("1 person")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [_vm._v(" Tech Support: ")]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 text-sm ml-3" },
                                          [_vm._v("6 months")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [_vm._v(" Free Updates: ")]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 text-sm ml-3" },
                                          [_vm._v("6 months")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ])
                            ]),
                            _c(
                              "base-button",
                              {
                                staticClass: "mt-4",
                                attrs: {
                                  tag: "a",
                                  href:
                                    "https://www.creative-tim.com/product/vue-argon-design-system-pro",
                                  type: "primary"
                                }
                              },
                              [_vm._v(" Buy Now! ")]
                            )
                          ],
                          1
                        )
                      ],
                      2
                    )
                  ],
                  1
                ),
                _c(
                  "div",
                  { staticClass: "col-md-6 pt-lg-5" },
                  [
                    _c(
                      "card",
                      {
                        staticClass: "card-pricing card-background",
                        staticStyle: {
                          "background-image":
                            "url('img/ill/pattern_pricing6.svg"
                        }
                      },
                      [
                        _c(
                          "template",
                          { slot: "body" },
                          [
                            _c(
                              "h6",
                              {
                                staticClass:
                                  "card-category text-danger text-uppercase"
                              },
                              [_vm._v(" Company License ")]
                            ),
                            _c(
                              "h1",
                              { staticClass: "card-title text-default" },
                              [_c("small", [_vm._v("$")]), _vm._v("299")]
                            ),
                            _c("ul", [
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [
                                        _c("i", {
                                          staticClass: "ni ni-check-bold"
                                        })
                                      ]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 ml-3 text-sm" },
                                          [_vm._v("Documentation")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [
                                        _c("i", {
                                          staticClass: "ni ni-check-bold"
                                        })
                                      ]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 ml-3 text-sm" },
                                          [_vm._v("Full Code")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [
                                        _c("i", {
                                          staticClass: "ni ni-check-bold"
                                        })
                                      ]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 ml-3 text-sm" },
                                          [_vm._v("Design Files")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [_vm._v(" Domains: ")]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 text-sm ml-3" },
                                          [_vm._v("unlimited")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [_vm._v(" Team size: ")]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 text-sm ml-3" },
                                          [_vm._v("5-10 people")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [_vm._v(" Tech Support: ")]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 text-sm ml-3" },
                                          [_vm._v("12 months")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ]),
                              _c("li", [
                                _c(
                                  "div",
                                  { staticClass: "d-flex align-items-center" },
                                  [
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-50" },
                                      [_vm._v(" Free Updates: ")]
                                    ),
                                    _c(
                                      "div",
                                      { staticClass: "text-left w-75" },
                                      [
                                        _c(
                                          "span",
                                          { staticClass: "pl-2 text-sm ml-3" },
                                          [_vm._v("12 months")]
                                        )
                                      ]
                                    )
                                  ]
                                )
                              ])
                            ]),
                            _c(
                              "base-button",
                              {
                                staticClass: "mt-4",
                                attrs: {
                                  tag: "a",
                                  href:
                                    "https://www.creative-tim.com/product/vue-argon-design-system-pro",
                                  type: "primary"
                                }
                              },
                              [_vm._v(" Buy Now! ")]
                            )
                          ],
                          1
                        )
                      ],
                      2
                    )
                  ],
                  1
                )
              ])
            ])
          ])
        ])
      ]
    )
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "lead" }, [
      _vm._v(" Start the Development with this"),
      _c("br"),
      _c("b", [_vm._v("Badass Bootstrap 4 Design System.")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "mt-5" }, [
      _c("small", { staticClass: "font-weight-bold mb-0 mr-2" }, [
        _vm._v("*proudly coded by")
      ]),
      _c("img", {
        staticStyle: { height: "28px" },
        attrs: { src: "img/brand/creativetim-black-slim.png" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "section-info" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col-lg-4 col-md-6" }, [
            _c("div", { staticClass: "info text-left" }, [
              _c(
                "div",
                {
                  staticClass:
                    "icon icon-lg icon-shape icon-shape-primary shadow rounded-circle"
                },
                [_c("i", { staticClass: "ni ni-user-run" })]
              ),
              _c(
                "h6",
                { staticClass: "info-title text-uppercase text-primary pl-0" },
                [_vm._v(" Huge number of components ")]
              ),
              _c("p", { staticClass: "description opacity-8" }, [
                _vm._v(
                  " Every element that you need in a product comes built in as a component. All components fit perfectly with each other and can take variations in colour. "
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "text-primary",
                  attrs: { href: "javascript:void(0);" }
                },
                [
                  _vm._v("More about us "),
                  _c("i", { staticClass: "ni ni-bold-right text-primary" })
                ]
              )
            ])
          ]),
          _c("div", { staticClass: "col-lg-4 col-md-6" }, [
            _c(
              "div",
              {
                staticClass: "info text-left",
                staticStyle: { "margin-top": "-50px" }
              },
              [
                _c(
                  "div",
                  {
                    staticClass:
                      "icon icon-lg icon-shape icon-shape-success shadow rounded-circle"
                  },
                  [_c("i", { staticClass: "ni ni-atom" })]
                ),
                _c(
                  "h6",
                  {
                    staticClass: "info-title text-uppercase text-success pl-0"
                  },
                  [_vm._v(" Multi-Purpose Sections ")]
                ),
                _c("p", { staticClass: "description opacity-8" }, [
                  _vm._v(
                    " Putting together a page has never been easier than matching together sections. From team presentation to pricing options, you can easily customise and built your pages. "
                  )
                ]),
                _c(
                  "a",
                  {
                    staticClass: "text-primary",
                    attrs: { href: "javascript:void(0);" }
                  },
                  [
                    _vm._v("Learn about our products "),
                    _c("i", { staticClass: "ni ni-bold-right text-primary" })
                  ]
                )
              ]
            )
          ]),
          _c("div", { staticClass: "col-lg-4 col-md-6" }, [
            _c("div", { staticClass: "info text-left" }, [
              _c(
                "div",
                {
                  staticClass:
                    "icon icon-lg icon-shape icon-shape-warning shadow rounded-circle"
                },
                [_c("i", { staticClass: "ni ni-istanbul" })]
              ),
              _c(
                "h6",
                { staticClass: "info-title text-uppercase text-warning pl-0" },
                [_vm._v(" Multiple Example Pages ")]
              ),
              _c("p", { staticClass: "description opacity-8" }, [
                _vm._v(
                  " If you want to get inspiration or just show something directly to your clients, you can jump start your development with our pre-built example pages. "
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "text-primary",
                  attrs: { href: "javascript:void(0);" }
                },
                [
                  _vm._v("Check our documentation "),
                  _c("i", { staticClass: "ni ni-bold-right text-primary" })
                ]
              )
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "section-basic-components" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col-lg-5 col-md-10 mb-md-5" }, [
            _c("h1", { staticClass: "display-3" }, [
              _vm._v(" Basic Elements"),
              _c("span", { staticClass: "text-primary" }, [
                _vm._v(" The core elements of your website")
              ])
            ]),
            _c("p", { staticClass: "lead" }, [
              _vm._v(
                " We re-styled every Bootstrap 4 element to match the Argon Design System style. All the Bootstrap 4 components that you need in a development have been re-design with the new look. Besides the numerous basic elements, we have also created additional classes. All these items will help you take your project to the next level. "
              )
            ])
          ]),
          _c("div", { staticClass: "col-lg-6 col-md-12" }, [
            _c("div", { staticClass: "image-container" }, [
              _c("img", {
                staticClass: "table-img",
                attrs: { src: "img/presentation-page/table.png", alt: "" }
              }),
              _c("img", {
                staticClass: "coloured-card-btn-img",
                attrs: { src: "img/presentation-page/card-btn.png", alt: "" }
              }),
              _c("img", {
                staticClass: "coloured-card-img",
                attrs: { src: "img/presentation-page/card-orange.png", alt: "" }
              }),
              _c("img", {
                staticClass: "linkedin-btn-img",
                attrs: { src: "img/presentation-page/slack-btn.png", alt: "" }
              }),
              _c("img", {
                staticClass: "w-100",
                attrs: { src: "img/ill/example-3.svg" }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "col-lg-5 col-md-10 col-12 mx-auto text-center" },
      [
        _c("h1", { staticClass: "display-3" }, [
          _vm._v(" Unconventional cards"),
          _c("span", { staticClass: "text-primary" }, [
            _vm._v(" One card for every problem")
          ])
        ]),
        _c("p", { staticClass: "lead" }, [
          _vm._v(
            " We love cards and everybody on the web seems to. We have gone above and beyond with options for you to organise your information. From cards designed for blog posts, to product cards or user profiles, you will have many options to choose from. All the cards follow the material principles and have a design that stands out. "
          )
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "section-content" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col-lg-6 mt-md-5 order-md-2 order-lg-1" }, [
            _c("div", { staticClass: "image-container" }, [
              _c("img", {
                staticClass: "img shadow rounded img-comments w-100",
                attrs: { src: "img/presentation-page/content-2.png" }
              }),
              _c("img", {
                staticClass: "img shadow rounded img-blog mt-5 w-100",
                attrs: { src: "img/presentation-page/content-1.png" }
              })
            ])
          ]),
          _c("div", { staticClass: "col-lg-6 mx-auto order-md-1" }, [
            _c("div", { staticClass: "section-description" }, [
              _c("h1", { staticClass: "display-3" }, [
                _vm._v(" Content Areas"),
                _c("span", { staticClass: "text-danger" }, [
                  _vm._v(" For Areas that Need More Space")
                ])
              ]),
              _c("p", { staticClass: "lead" }, [
                _vm._v(
                  " We took into consideration multiple use cases and came up with some specific areas for you. If you need elements such as tables, comments, description areas, tabs and many others, we've got you covered. They're beautiful and easy to use for the end user navigating your website. "
                )
              ])
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "section-sections bg-secondary" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "col-md-8 mx-auto" }, [
          _c("div", { staticClass: "section-description text-center" }, [
            _c("h2", { staticClass: "display-2" }, [
              _vm._v("Sections you will love")
            ]),
            _c("p", { staticClass: "lead" }, [
              _vm._v(
                " Build pages in no time using pre-made sections! From headers to footers, you will be able to choose the best combination for your project. We have created multiple sections for you to put together and customise into pixel perfect example pages. "
              )
            ]),
            _c(
              "a",
              {
                staticClass: "btn btn-primary btn-round",
                attrs: { href: "sections.html", target: "_blank" }
              },
              [_vm._v("View All Sections")]
            )
          ])
        ])
      ]),
      _c("div", { staticClass: "container-fluid" }, [
        _c("div", { staticClass: "section-cols" }, [
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/header-1.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/header-2.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/header-3.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/header-4.jpg",
                  alt: ""
                }
              })
            ])
          ]),
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/feature-1.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/feature-2.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/feature-3.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/feature-4.jpg",
                  alt: ""
                }
              })
            ])
          ]),
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/blog-1.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/blog-2.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/blog-3.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/blog-4.jpg",
                  alt: ""
                }
              })
            ])
          ]),
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/blog-5.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/team-1.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/team-2.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/team-3.jpg",
                  alt: ""
                }
              })
            ])
          ]),
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page//sections/team-4.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/team-5.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/project-1.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/project-2.jpg",
                  alt: ""
                }
              })
            ])
          ]),
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/project-3.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/pricing-1.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/pricing-2.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/pricing-3.jpg",
                  alt: ""
                }
              })
            ])
          ]),
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/pricing-4.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/pricing-5.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/testimonial-1.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/testimonial-2.jpg",
                  alt: ""
                }
              })
            ])
          ]),
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/testimonial-3.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/contact-1.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/contact-2.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/contact-3.jpg",
                  alt: ""
                }
              })
            ])
          ]),
          _c("div", { staticClass: "row mt-5 mb-5" }, [
            _c("div", { staticClass: "col-md-3 ml-auto" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/contact-4.jpg",
                  alt: ""
                }
              })
            ]),
            _c("div", { staticClass: "col-md-3 mr-auto" }, [
              _c("img", {
                staticClass: "shadow",
                attrs: {
                  src: "img/presentation-page/sections/table-1.jpg",
                  alt: ""
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-8 mx-auto text-center" }, [
      _c("div", { staticClass: "section-description" }, [
        _c("h2", { staticClass: "display-2" }, [_vm._v("Example Pages")]),
        _c("p", { staticClass: "lead" }, [
          _vm._v(
            " Forget about building everything from scratch. From landing pages to e-commerce or blog pages, you will be able jump start your development. Show your clients a quick prototype and get inspired for your next project! "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "section-patterns" }, [
      _c("div", { staticClass: "container-fluid" }, [
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            {
              staticClass: "col-lg-4 col-md-10 col-12 mx-auto text-center align"
            },
            [
              _c("h1", { staticClass: "display-3" }, [
                _vm._v(" Wonderful Patterns"),
                _c("span", { staticClass: "text-primary" }, [
                  _vm._v(" Different styles, colors and emotions")
                ])
              ]),
              _c("p", { staticClass: "lead" }, [
                _vm._v(
                  " Devices mockups, Branding mockups, UI/UX Tools, Illustrations and much more. Free and premium. Use Paaatterns together with powerful design system and speed up your workflow "
                )
              ]),
              _c(
                "a",
                {
                  staticClass: "btn btn-primary",
                  attrs: {
                    href:
                      "https://www.ls.graphics/?status=accepted&expires=1574163072&seller=15046&affiliate=102023&link=1681&p_tok=05cf15f3-a34b-4dd4-aa6b-a4e8652ed45b",
                    target: "_blank",
                    rel: "nofollow"
                  }
                },
                [_vm._v("View more")]
              )
            ]
          ),
          _c("div", { staticClass: "col-lg-6 col-md-12" }, [
            _c("img", {
              staticClass: "w-50 pattern-1 shadow",
              attrs: { src: "img/presentation-page/layer-1.jpg", alt: "" }
            }),
            _c("img", {
              staticClass: "w-50 pattern-2 shadow",
              attrs: { src: "img/presentation-page/layer-2.jpg", alt: "" }
            }),
            _c("img", {
              staticClass: "w-50 pattern-3 shadow",
              attrs: { src: "img/presentation-page/layer-3.jpg", alt: "" }
            }),
            _c("img", {
              staticClass: "w-50 pattern-4 shadow",
              attrs: { src: "img/presentation-page/layer-4.jpg", alt: "" }
            })
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-lg-5 col-md-12" }, [
      _c("div", { staticClass: "github-background-container" }, [
        _c("i", { staticClass: "fa fa-github" })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-lg-3 col-sm-2" }, [
      _c("div", { staticClass: "icons-nucleo" }, [
        _c("i", { staticClass: "first-left-icon ni ni-send text-primary" }),
        _c("i", {
          staticClass: "second-left-icon ni ni-alert-circle-exc text-warning"
        }),
        _c("i", { staticClass: "third-left-icon ni ni-cart text-info" }),
        _c("i", { staticClass: "fourth-left-icon ni ni-bold text-default" }),
        _c("i", {
          staticClass: "fifth-left-icon ni ni-headphones text-danger"
        }),
        _c("i", {
          staticClass: "sixth-left-icon ni ni-satisfied text-success"
        }),
        _c("i", { staticClass: "seventh-left-icon ni ni-cart text-pink" }),
        _c("i", { staticClass: "eighth-left-icon ni ni-spaceship text-info" }),
        _c("i", {
          staticClass: "ninth-left-icon ni ni-sound-wave text-warning"
        }),
        _c("i", { staticClass: "tenth-left-icon ni ni-heart-2 text-danger" })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "lead" }, [
      _vm._v(
        " Vue Argon Design System PRO comes with 100 custom demo icons made by our friends from "
      ),
      _c(
        "a",
        {
          attrs: {
            href: "https://nucleoapp.com/?ref=1712",
            target: "_blank",
            rel: "nofollow"
          }
        },
        [_vm._v("NucleoApp")]
      ),
      _vm._v(
        ". The official package contains over 20.729 icons which are looking great in combination with Vue Argon Design System PRO. Make sure you check all of them and use those that you like the most. "
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-lg-3 col-sm-2" }, [
      _c(
        "div",
        { staticClass: "icons-nucleo icons-nucleo-right text-success" },
        [
          _c("i", {
            staticClass: "first-right-icon ni ni-palette text-warning"
          }),
          _c("i", {
            staticClass: "second-right-icon ni ni-tie-bow text-primary"
          }),
          _c("i", { staticClass: "third-right-icon ni ni-pin text-info" }),
          _c("i", {
            staticClass: "fourth-right-icon ni ni-key-25 text-purple"
          }),
          _c("i", {
            staticClass: "fifth-right-icon ni ni-istanbul text-danger"
          }),
          _c("i", {
            staticClass: "sixth-right-icon ni ni-bus-front-12 text-warning"
          }),
          _c("i", {
            staticClass: "seventh-right-icon ni ni-image-02 text-success"
          }),
          _c("i", { staticClass: "eighth-right-icon ni ni-world text-info" }),
          _c("i", {
            staticClass: "ninth-right-icon ni ni-puzzle-10 text-primary"
          }),
          _c("i", { staticClass: "tenth-right-icon ni ni-atom text-default" })
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("section", { staticClass: "section-features bg-secondary" }, [
      _c("div", { staticClass: "container-fluid" }, [
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col-lg-6 col-md-12 pt-5" }, [
            _c("div", { staticClass: "info info-horizontal" }, [
              _c(
                "div",
                {
                  staticClass:
                    "icon icon-shape icon-shape-warning rounded-circle text-white"
                },
                [_c("i", { staticClass: "ni ni-money-coins text-warning" })]
              ),
              _c("div", { staticClass: "description pl-4 pt-2" }, [
                _c("h5", { staticClass: "title" }, [
                  _vm._v("Save Time & Money")
                ]),
                _c("p", [
                  _vm._v(
                    " Creating your design from scratch with dedicated designers can be very expensive. Using Vue Argon Design System PRO you don't have to worry about customising the basic Bootstrap 4 design or its components. "
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "info info-horizontal" }, [
              _c(
                "div",
                {
                  staticClass:
                    "icon icon-shape icon-shape-info rounded-circle text-white"
                },
                [_c("i", { staticClass: "ni ni-bold text-info" })]
              ),
              _c("div", { staticClass: "description pl-4 pt-2" }, [
                _c("h5", { staticClass: "title" }, [
                  _vm._v("Bootstrap 4 & Flexbox")
                ]),
                _c("p", [
                  _vm._v(
                    " It is built over Bootstrap 4, it's fully responsive and has all the benefits of the flexbox for the layout, grid system and components. This is a huge advantage when you work with columns. "
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "info info-horizontal" }, [
              _c(
                "div",
                {
                  staticClass:
                    "icon icon-shape icon-shape-danger rounded-circle text-white"
                },
                [_c("i", { staticClass: "ni ni-paper-diploma text-danger" })]
              ),
              _c("div", { staticClass: "description pl-4 pt-2" }, [
                _c("h5", { staticClass: "title" }, [_vm._v("Fast Prototype")]),
                _c("p", [
                  _vm._v(
                    " Using Vue Argon Design System PRO you can create hundreds of components combinations within seconds and present them to your client. You just need to change some classes and colors. "
                  )
                ])
              ])
            ])
          ]),
          _c("div", { staticClass: "col-lg-6 col-md-12" }, [
            _c("div", { staticClass: "image-container" }, [
              _c("img", {
                staticClass: "w-100",
                attrs: { src: "img/presentation-page/ipad.png", alt: "" }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col-md-8 ml-auto mr-auto text-center" }, [
        _c("h2", { staticClass: "display-2 mb-5" }, [
          _vm._v("Trusted by 880,000+ People")
        ]),
        _c("p", { staticClass: "lead" }, [
          _vm._v(
            " The UI Kits, Templates and Dashboards that we've created are used by "
          ),
          _c("strong", { staticClass: "text-primary" }, [
            _vm._v("880,000+ web developers")
          ]),
          _vm._v(" in over "),
          _c("strong", { staticClass: "text-primary" }, [
            _vm._v("1,500,000 Web Projects")
          ]),
          _vm._v(". This is what some of them think: ")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row our-clients" }, [
      _c("div", { staticClass: "col-lg-3 col-md-6 col-6" }, [
        _c("img", {
          staticClass: "w-50",
          attrs: { src: "img/presentation-page/harvard.jpg", alt: "" }
        })
      ]),
      _c("div", { staticClass: "col-lg-3 col-md-6 col-6" }, [
        _c("img", {
          staticClass: "w-50",
          attrs: { src: "img/presentation-page/microsoft.jpg", alt: "" }
        })
      ]),
      _c("div", { staticClass: "col-lg-3 col-md-6 col-6" }, [
        _c("img", {
          staticClass: "w-50",
          attrs: { src: "img/presentation-page/vodafone.jpg", alt: "" }
        })
      ]),
      _c("div", { staticClass: "col-lg-3 col-md-6 col-6" }, [
        _c("img", {
          staticClass: "w-50",
          attrs: { src: "img/presentation-page/stanford.jpg", alt: "" }
        })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-8 mx-auto text-center mt-5" }, [
      _c("h2", { staticClass: "title" }, [
        _vm._v(" Ready to grab "),
        _c("span", { staticClass: "text-success" }, [
          _vm._v("Vue Argon Design System PRO")
        ]),
        _vm._v("? ")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "description mb-5 text-center" }, [
      _vm._v(" You have "),
      _c("b", [_vm._v("Free Unlimited Updates")]),
      _vm._v(" and "),
      _c("b", [_vm._v("Premium Support")]),
      _vm._v(" on each package. You also have "),
      _c("b", [_vm._v("30 days")]),
      _vm._v(" to request a refund if you're not happy with your purchase. "),
      _c("br"),
      _vm._v(" Read more about "),
      _c("b", [
        _c(
          "a",
          {
            attrs: {
              href: "https://www.creative-tim.com/license",
              target: "_blank"
            }
          },
          [_vm._v("licenses here")]
        )
      ]),
      _vm._v(". ")
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}
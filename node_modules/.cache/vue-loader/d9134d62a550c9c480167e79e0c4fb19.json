{"remainingRequest":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/parkerbrown/lilbig/broke/test/src/views/Presentation.vue?vue&type=template&id=295fd354&","dependencies":[{"path":"/Users/parkerbrown/lilbig/broke/test/src/views/Presentation.vue","mtime":1614458893868},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/cache-loader/dist/cjs.js","mtime":1581893857330},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1609898063567},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/cache-loader/dist/cjs.js","mtime":1581893857330},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/index.js","mtime":1609898063567}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
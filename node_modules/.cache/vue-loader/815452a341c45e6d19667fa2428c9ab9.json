{"remainingRequest":"/Users/parkerbrown/lilbig/dev/flow/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/parkerbrown/lilbig/dev/flow/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/parkerbrown/lilbig/dev/flow/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/parkerbrown/lilbig/dev/flow/src/views/sections/Features/Feature2.vue?vue&type=template&id=3e80cf07&","dependencies":[{"path":"/Users/parkerbrown/lilbig/dev/flow/src/views/sections/Features/Feature2.vue","mtime":1614502462988},{"path":"/Users/parkerbrown/lilbig/dev/flow/node_modules/cache-loader/dist/cjs.js","mtime":1614502454518},{"path":"/Users/parkerbrown/lilbig/dev/flow/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1614502461354},{"path":"/Users/parkerbrown/lilbig/dev/flow/node_modules/cache-loader/dist/cjs.js","mtime":1614502454518},{"path":"/Users/parkerbrown/lilbig/dev/flow/node_modules/vue-loader/lib/index.js","mtime":1614502461353}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
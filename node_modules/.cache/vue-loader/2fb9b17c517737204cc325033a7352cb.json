{"remainingRequest":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/parkerbrown/lilbig/broke/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/parkerbrown/lilbig/broke/test/src/views/sections/Features/Feature4.vue?vue&type=template&id=3e9cfe09&","dependencies":[{"path":"/Users/parkerbrown/lilbig/broke/test/src/views/sections/Features/Feature4.vue","mtime":1614458893898},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/cache-loader/dist/cjs.js","mtime":1581893857330},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1609898063567},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/cache-loader/dist/cjs.js","mtime":1581893857330},{"path":"/Users/parkerbrown/lilbig/broke/test/node_modules/vue-loader/lib/index.js","mtime":1609898063567}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
{"remainingRequest":"/Users/parkerbrown/lbd/dev/flowflow/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/parkerbrown/lbd/dev/flowflow/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/parkerbrown/lbd/dev/flowflow/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/parkerbrown/lbd/dev/flowflow/src/views/sections/Testimonial/Testimonial2.vue?vue&type=template&id=33594f3a&","dependencies":[{"path":"/Users/parkerbrown/lbd/dev/flowflow/src/views/sections/Testimonial/Testimonial2.vue","mtime":1623120971937},{"path":"/Users/parkerbrown/lbd/dev/flowflow/node_modules/cache-loader/dist/cjs.js","mtime":1623120964909},{"path":"/Users/parkerbrown/lbd/dev/flowflow/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1623120971017},{"path":"/Users/parkerbrown/lbd/dev/flowflow/node_modules/cache-loader/dist/cjs.js","mtime":1623120964909},{"path":"/Users/parkerbrown/lbd/dev/flowflow/node_modules/vue-loader/lib/index.js","mtime":1623120971017}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
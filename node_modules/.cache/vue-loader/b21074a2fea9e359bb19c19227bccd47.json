{"remainingRequest":"/Users/parkerbrown/lilbig/dev/flow/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/parkerbrown/lilbig/dev/flow/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/parkerbrown/lilbig/dev/flow/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/parkerbrown/lilbig/dev/flow/src/views/Ecommerce.vue?vue&type=template&id=4c615d76&","dependencies":[{"path":"/Users/parkerbrown/lilbig/dev/flow/src/views/Ecommerce.vue","mtime":1614502462971},{"path":"/Users/parkerbrown/lilbig/dev/flow/node_modules/cache-loader/dist/cjs.js","mtime":1614502454518},{"path":"/Users/parkerbrown/lilbig/dev/flow/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1614502461354},{"path":"/Users/parkerbrown/lilbig/dev/flow/node_modules/cache-loader/dist/cjs.js","mtime":1614502454518},{"path":"/Users/parkerbrown/lilbig/dev/flow/node_modules/vue-loader/lib/index.js","mtime":1614502461353}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}